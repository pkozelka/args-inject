 ------
 Tutorial
 ------
 Petr Kozelka

%{toc|fromDepth=2}

Args-inject step-by-step tutorial

   This tutorial assumes you will read also some other pages on the site, and concentrates on stating rules and recommendations in each step.

* Creating a simple commandline application

   Basic steps

   * Add <<<args-inject>>> to your compile dependencies <(== javac classpath)>

   * Create SubCommand class

   * Define options methods

   * Create Application class

   * Creating wrapper shell script

** Adding args-inject to dependencies

*** Maven2 project

   If you use Maven2, you have a project with a <<<pom.xml>>> so you will need to add something like this <(with the released version that you selected, of course)>:

%{code-snippet|id=dependency|brush=xml|file=src/site/snip.xml}

*** Ant project

   If you compile your code with Ant, then fragments of following code might be useful to you:

%{code-snippet|id=ant-maven-dependency|brush=xml|file=src/site/snip.xml}

   Note that this uses the ant library {{{http://maven.apache.org/ant-tasks/}maven-ant-tasks}} which is an excellent library for reusing Maven artifacts in Ant code; I highly recommend it to your attention.

*** Direct download link

   In some cases, it might still be useful to have direct download links. Here they are:

*---+---*---*---+
 <<Artifact>> | <<MD5>> | <<SHA1>> | <<Description>>
*---+---*---*---+
 {{{http://repo1.maven.org/maven2/net/kozelka/args-inject/0.1-SNAPSHOT/0.1-SNAPSHOT.jar}args-inject-0.1-SNAPSHOT.jar}} | {{{jar.md5}MD5}} | {{{http://jar.sha1}SHA1}} | library JAR
*---+---*---*---+
 {{{http://sources.jar}args-inject-0.1-SNAPSHOT-sources.jar}} | {{{sources.jar.md5}MD5}} | {{{sources.jar.sha1}SHA1}} | library sources
*---+---*---*---+

*** Any other build system or IDE

   Well, reading the above sections, you get the idea - use your skills to setup your buildsystem so that it compiles against <<<args-inject>>>, among other external libraries.

** Creating SubCommand class

   Rules

   * the class must implement <<<ArgsCommand>>>

   * class should be annottated with <<<@SubCommand>>> with a little description

   * create constructor with taking mandatory parameters of the command

   * to allow unlimited number of params, your last constructor's parameter can be Java varargs array <(using notation "SomeType... myarray" )>

   * the functionality must be implemented within the <<<Integer call()>>> method; usually you will want to return 0 from it

   [] 

   Hints

   * create a common ancestor for your subcommand classes, to share functionality and option declarations

   * to share only option declarations between commands, use dedicated interface

   * unnamed subcommand class can only be used for default subcommand

   * returning any other <exitCode> from <<<call()>>> makes only sense if you want your application to fail silently - or if your code already printed an error message

   []

*** Sample subcommand class

%{code-snippet|brush=java|file=src/test/java/net/kozelka/args/DemoFileLister.java}



** Defining option method

   Rules

   * option method must be annottated with <<<@Option>>>, specifying at least one of <<<shortName>>> or <<<longName>>> attributes

   * option method must return void and cannot be static

   * option method is invoked for every occurence on the commandline

   * method param(s) map to option value(s)

   * varargs cannot be used for options (it works just as array)

   []

   Hints

   * when design your commandline structure, you should make options really optional - "mandatory options" are not nice, and <<args-inject>> does not provide any specific support for it

   * option can have as many values as you wish; however, using 0..2 params should usually make you happy enough

   * make the functionality independent of mutual commandline order - it makes the functionality easier to predict

** Creating application class

   Rules

   * implement both <<<main>>> and <<<run>>> as shown in <<MiniCalc sample>>

   * your application should always return with 0 on success and with 1 on failure; this is conveniently handled by method <<<BasicArgsParser.process>>>

   []

   Hints

   * use default help command

   []

*** Sample main method

%{code-snippet|id=sample-main|brush=java|file=src/test/java/net/kozelka/args/ArgsParserTest.java}

** Creating wrapper shell script

   Rules

   * use the name you specified in <<<main()>>> as the base name; that is, <<<something.bat>>> or <<<something.cmd>>> on Windows, and just <<<something>>> on Linux

   * be sure to pass exitcode from JVM also out from the script; putting <<<java>>> as the latest command usually does the job

   * remember to pass script arguments to your main class - on Windows, use "<<<%*>>>", on Linux, use "<<<$*>>>". 

   []

   Hints

   * remember to include all runtime dependencies in the resulting classpath

   * keep the shell script as brief as possible; long scripts are difficult to translate under certain platforms, especially Windows

   * on Linux, if your last command of the script is <<<java>>> <(recommended!)>, then it is good to call it with exec to reuse script's process for JVM:
   
     <<<exec java -classpath $CP net.kozelka.args.minicalc.MiniCalc $*>>>

   * there are several tools to ensure that your output jar does not require any external libraries, which makes the launcher a bit simpler. Have a look at:

      * {{{http://code.google.com/p/onejar-maven-plugin}onejar-maven-plugin}} using {{{http://one-jar.sourceforge.net}one-jar library}} - packages dependencies into your jar; your code is then executed via a proxy main class and its custom classloader

      * {{{http://maven.apache.org/plugins/maven-shade-plugin}maven-shade-plugin}} - see {{{http://maven.apache.org/plugins/maven-shade-plugin/examples/executable-jar.html}Executable JAR}} - dependency classes are extracted and mixed into your jar

         * {{{http://maven.apache.org/plugins/maven-dependency-plugin/unpack-dependencies-mojo.html}unpack-dependencies mojo of maven-dependency-plugin}}
            can produce similar effect but without {{{http://maven.apache.org/plugins/maven-shade-plugin/examples/resource-transformers.html}resource transformation}}

      * {{{http://maven.apache.org/plugins/maven-assembly-plugin}maven-assembly-plugin}}

* Finetuning

   * using default command - see {{{./Subcommands.html}Subcommands}}

   * specifying symbolic names to improve help outputs - see {{{./Params.html}Params}}

   * working with arrays  - see {{{./Options.html}Options}}

   * TODO: using help as the default
